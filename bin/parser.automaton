State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On PRINTLN shift to state 44
-- On PRINT shift to state 46
-- On IF shift to state 48
-- On IDENT shift to state 9
-- On FOR shift to state 53
-- On statement shift to state 62
-- On program shift to state 115
-- On list(statement) shift to state 116
-- On incomplete_statement shift to state 64
-- On ident shift to state 66
## Reductions:
-- On EOF
--   reduce production list(statement) ->

State 1:
## Known stack suffix:
## WHILE
## LR(1) items:
statement -> WHILE . LPAREN expression RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On LPAREN shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## WHILE LPAREN
## LR(1) items:
statement -> WHILE LPAREN . expression RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 41
## Reductions:

State 3:
## Known stack suffix:
## STRING_LIT
## LR(1) items:
expression -> STRING_LIT . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
## Reductions:
-- On TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND
--   reduce production expression -> STRING_LIT

State 4:
## Known stack suffix:
## NOT
## LR(1) items:
expression -> NOT . expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 40
## Reductions:

State 5:
## Known stack suffix:
## MINUS
## LR(1) items:
expression -> MINUS . INT_LIT [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On INT_LIT shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## MINUS INT_LIT
## LR(1) items:
expression -> MINUS INT_LIT . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
## Reductions:
-- On TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND
--   reduce production expression -> MINUS INT_LIT

State 7:
## Known stack suffix:
## LPAREN
## LR(1) items:
expression -> LPAREN . expression RPAREN [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 12
## Reductions:

State 8:
## Known stack suffix:
## INT_LIT
## LR(1) items:
expression -> INT_LIT . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
## Reductions:
-- On TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND
--   reduce production expression -> INT_LIT

State 9:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LPAREN LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS ASSIGN_EQUALS AND ]
## Transitions:
## Reductions:
-- On TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LPAREN LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS ASSIGN_EQUALS AND
--   reduce production ident -> IDENT

State 10:
## Known stack suffix:
## BOOL_LIT
## LR(1) items:
expression -> BOOL_LIT . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
## Reductions:
-- On TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND
--   reduce production expression -> BOOL_LIT

State 11:
## Known stack suffix:
## ident
## LR(1) items:
expression -> ident . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
## Reductions:
-- On TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND
--   reduce production expression -> ident

State 12:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> LPAREN expression . RPAREN [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On TIMES shift to state 13
-- On TERNARY_QUESTIONMARK shift to state 17
-- On RPAREN shift to state 39
-- On PLUS shift to state 21
-- On OR shift to state 25
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:

State 13:
## Known stack suffix:
## expression TIMES
## LR(1) items:
expression -> expression TIMES . expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## expression TIMES expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression TIMES expression . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
## Reductions:
-- On TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND
--   reduce production expression -> expression TIMES expression
** Conflict on LESS_EQ LESS GREATER_EQ GREATER

State 15:
## Known stack suffix:
## expression LESS_EQ
## LR(1) items:
expression -> expression LESS_EQ . expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## expression LESS_EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression LESS_EQ expression . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On TIMES shift to state 13
-- On TERNARY_QUESTIONMARK shift to state 17
-- On PLUS shift to state 21
-- On OR shift to state 25
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:
-- On TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND
--   reduce production expression -> expression LESS_EQ expression
** Conflict on TIMES TERNARY_QUESTIONMARK PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND

State 17:
## Known stack suffix:
## expression TERNARY_QUESTIONMARK
## LR(1) items:
expression -> expression TERNARY_QUESTIONMARK . expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## expression TERNARY_QUESTIONMARK expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression TERNARY_QUESTIONMARK expression . TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On TIMES shift to state 13
-- On TERNARY_QUESTIONMARK shift to state 17
-- On TERNARY_COLON shift to state 19
-- On PLUS shift to state 21
-- On OR shift to state 25
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:

State 19:
## Known stack suffix:
## expression TERNARY_QUESTIONMARK expression TERNARY_COLON
## LR(1) items:
expression -> expression TERNARY_QUESTIONMARK expression TERNARY_COLON . expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## expression TERNARY_QUESTIONMARK expression TERNARY_COLON expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression TERNARY_QUESTIONMARK expression TERNARY_COLON expression . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On TIMES shift to state 13
-- On PLUS shift to state 21
-- On OR shift to state 25
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:
-- On TERNARY_QUESTIONMARK TERNARY_COLON RPAREN LESS_EQ LESS GREATER_EQ GREATER ENDLINE COMMA
--   reduce production expression -> expression TERNARY_QUESTIONMARK expression TERNARY_COLON expression
** Conflict on LESS_EQ LESS GREATER_EQ GREATER

State 21:
## Known stack suffix:
## expression PLUS
## LR(1) items:
expression -> expression PLUS . expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## expression PLUS expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression PLUS expression . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On TIMES shift to state 13
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
## Reductions:
-- On TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE COMMA BOOL_EQUALS AND
--   reduce production expression -> expression PLUS expression
** Conflict on LESS_EQ LESS GREATER_EQ GREATER

State 23:
## Known stack suffix:
## expression LESS
## LR(1) items:
expression -> expression LESS . expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## expression LESS expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression LESS expression . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On TIMES shift to state 13
-- On TERNARY_QUESTIONMARK shift to state 17
-- On PLUS shift to state 21
-- On OR shift to state 25
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:
-- On TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND
--   reduce production expression -> expression LESS expression
** Conflict on TIMES TERNARY_QUESTIONMARK PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND

State 25:
## Known stack suffix:
## expression OR
## LR(1) items:
expression -> expression OR . expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## expression OR expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression OR expression . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On TIMES shift to state 13
-- On PLUS shift to state 21
-- On OR shift to state 25
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:
-- On TERNARY_QUESTIONMARK TERNARY_COLON RPAREN LESS_EQ LESS GREATER_EQ GREATER ENDLINE COMMA
--   reduce production expression -> expression OR expression
** Conflict on LESS_EQ LESS GREATER_EQ GREATER

State 27:
## Known stack suffix:
## expression MINUS
## LR(1) items:
expression -> expression MINUS . expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## expression MINUS expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression MINUS expression . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On TIMES shift to state 13
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
## Reductions:
-- On TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE COMMA BOOL_EQUALS AND
--   reduce production expression -> expression MINUS expression
** Conflict on LESS_EQ LESS GREATER_EQ GREATER

State 29:
## Known stack suffix:
## expression GREATER_EQ
## LR(1) items:
expression -> expression GREATER_EQ . expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## expression GREATER_EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression GREATER_EQ expression . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On TIMES shift to state 13
-- On TERNARY_QUESTIONMARK shift to state 17
-- On PLUS shift to state 21
-- On OR shift to state 25
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:
-- On TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND
--   reduce production expression -> expression GREATER_EQ expression
** Conflict on TIMES TERNARY_QUESTIONMARK PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND

State 31:
## Known stack suffix:
## expression GREATER
## LR(1) items:
expression -> expression GREATER . expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## expression GREATER expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression GREATER expression . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On TIMES shift to state 13
-- On TERNARY_QUESTIONMARK shift to state 17
-- On PLUS shift to state 21
-- On OR shift to state 25
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:
-- On TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND
--   reduce production expression -> expression GREATER expression
** Conflict on TIMES TERNARY_QUESTIONMARK PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND

State 33:
## Known stack suffix:
## expression DIV
## LR(1) items:
expression -> expression DIV . expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## expression DIV expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression DIV expression . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
## Reductions:
-- On TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND
--   reduce production expression -> expression DIV expression
** Conflict on LESS_EQ LESS GREATER_EQ GREATER

State 35:
## Known stack suffix:
## expression BOOL_EQUALS
## LR(1) items:
expression -> expression BOOL_EQUALS . expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## expression BOOL_EQUALS expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression BOOL_EQUALS expression . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On TIMES shift to state 13
-- On PLUS shift to state 21
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
## Reductions:
-- On TERNARY_QUESTIONMARK TERNARY_COLON RPAREN OR LESS_EQ LESS GREATER_EQ GREATER ENDLINE COMMA BOOL_EQUALS AND
--   reduce production expression -> expression BOOL_EQUALS expression
** Conflict on LESS_EQ LESS GREATER_EQ GREATER

State 37:
## Known stack suffix:
## expression AND
## LR(1) items:
expression -> expression AND . expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## expression AND expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression AND expression . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On TIMES shift to state 13
-- On PLUS shift to state 21
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:
-- On TERNARY_QUESTIONMARK TERNARY_COLON RPAREN OR LESS_EQ LESS GREATER_EQ GREATER ENDLINE COMMA
--   reduce production expression -> expression AND expression
** Conflict on LESS_EQ LESS GREATER_EQ GREATER

State 39:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
expression -> LPAREN expression RPAREN . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
## Reductions:
-- On TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND
--   reduce production expression -> LPAREN expression RPAREN

State 40:
## Known stack suffix:
## NOT expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> NOT expression . [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND ]
## Transitions:
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
## Reductions:
-- On TIMES TERNARY_QUESTIONMARK TERNARY_COLON RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV COMMA BOOL_EQUALS AND
--   reduce production expression -> NOT expression
** Conflict on LESS_EQ LESS GREATER_EQ GREATER

State 41:
## Known stack suffix:
## WHILE LPAREN expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
statement -> WHILE LPAREN expression . RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On TIMES shift to state 13
-- On TERNARY_QUESTIONMARK shift to state 17
-- On RPAREN shift to state 42
-- On PLUS shift to state 21
-- On OR shift to state 25
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:

State 42:
## Known stack suffix:
## WHILE LPAREN expression RPAREN
## LR(1) items:
statement -> WHILE LPAREN expression RPAREN . LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On LCURLY shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## WHILE LPAREN expression RPAREN LCURLY
## LR(1) items:
statement -> WHILE LPAREN expression RPAREN LCURLY . list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On WHILE shift to state 1
-- On PRINTLN shift to state 44
-- On PRINT shift to state 46
-- On IF shift to state 48
-- On IDENT shift to state 9
-- On FOR shift to state 53
-- On statement shift to state 62
-- On list(statement) shift to state 113
-- On incomplete_statement shift to state 64
-- On ident shift to state 66
## Reductions:
-- On RCURLY
--   reduce production list(statement) ->

State 44:
## Known stack suffix:
## PRINTLN
## LR(1) items:
incomplete_statement -> PRINTLN . expression [ RPAREN ENDLINE ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## PRINTLN expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
incomplete_statement -> PRINTLN expression . [ RPAREN ENDLINE ]
## Transitions:
-- On TIMES shift to state 13
-- On TERNARY_QUESTIONMARK shift to state 17
-- On PLUS shift to state 21
-- On OR shift to state 25
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:
-- On RPAREN ENDLINE
--   reduce production incomplete_statement -> PRINTLN expression

State 46:
## Known stack suffix:
## PRINT
## LR(1) items:
incomplete_statement -> PRINT . expression [ RPAREN ENDLINE ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## PRINT expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
incomplete_statement -> PRINT expression . [ RPAREN ENDLINE ]
## Transitions:
-- On TIMES shift to state 13
-- On TERNARY_QUESTIONMARK shift to state 17
-- On PLUS shift to state 21
-- On OR shift to state 25
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:
-- On RPAREN ENDLINE
--   reduce production incomplete_statement -> PRINT expression

State 48:
## Known stack suffix:
## IF
## LR(1) items:
statement -> IF . LPAREN expression RPAREN LCURLY list(statement) RCURLY list(elseif) [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
statement -> IF . LPAREN expression RPAREN incomplete_statement ENDLINE list(elseif) [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On LPAREN shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## IF LPAREN
## LR(1) items:
statement -> IF LPAREN . expression RPAREN LCURLY list(statement) RCURLY list(elseif) [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
statement -> IF LPAREN . expression RPAREN incomplete_statement ENDLINE list(elseif) [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## IF LPAREN expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
statement -> IF LPAREN expression . RPAREN LCURLY list(statement) RCURLY list(elseif) [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
statement -> IF LPAREN expression . RPAREN incomplete_statement ENDLINE list(elseif) [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On TIMES shift to state 13
-- On TERNARY_QUESTIONMARK shift to state 17
-- On RPAREN shift to state 51
-- On PLUS shift to state 21
-- On OR shift to state 25
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:

State 51:
## Known stack suffix:
## IF LPAREN expression RPAREN
## LR(1) items:
statement -> IF LPAREN expression RPAREN . LCURLY list(statement) RCURLY list(elseif) [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
statement -> IF LPAREN expression RPAREN . incomplete_statement ENDLINE list(elseif) [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On PRINTLN shift to state 44
-- On PRINT shift to state 46
-- On LCURLY shift to state 52
-- On IDENT shift to state 9
-- On incomplete_statement shift to state 110
-- On ident shift to state 88
## Reductions:

State 52:
## Known stack suffix:
## IF LPAREN expression RPAREN LCURLY
## LR(1) items:
statement -> IF LPAREN expression RPAREN LCURLY . list(statement) RCURLY list(elseif) [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On WHILE shift to state 1
-- On PRINTLN shift to state 44
-- On PRINT shift to state 46
-- On IF shift to state 48
-- On IDENT shift to state 9
-- On FOR shift to state 53
-- On statement shift to state 62
-- On list(statement) shift to state 90
-- On incomplete_statement shift to state 64
-- On ident shift to state 66
## Reductions:
-- On RCURLY
--   reduce production list(statement) ->

State 53:
## Known stack suffix:
## FOR
## LR(1) items:
statement -> FOR . LPAREN incomplete_statement ENDLINE expression ENDLINE incomplete_statement RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On LPAREN shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## FOR LPAREN
## LR(1) items:
statement -> FOR LPAREN . incomplete_statement ENDLINE expression ENDLINE incomplete_statement RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On PRINTLN shift to state 44
-- On PRINT shift to state 46
-- On IDENT shift to state 9
-- On incomplete_statement shift to state 55
-- On ident shift to state 88
## Reductions:

State 55:
## Known stack suffix:
## FOR LPAREN incomplete_statement
## LR(1) items:
statement -> FOR LPAREN incomplete_statement . ENDLINE expression ENDLINE incomplete_statement RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On ENDLINE shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## FOR LPAREN incomplete_statement ENDLINE
## LR(1) items:
statement -> FOR LPAREN incomplete_statement ENDLINE . expression ENDLINE incomplete_statement RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## FOR LPAREN incomplete_statement ENDLINE expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
statement -> FOR LPAREN incomplete_statement ENDLINE expression . ENDLINE incomplete_statement RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On TIMES shift to state 13
-- On TERNARY_QUESTIONMARK shift to state 17
-- On PLUS shift to state 21
-- On OR shift to state 25
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On ENDLINE shift to state 58
-- On DIV shift to state 33
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:

State 58:
## Known stack suffix:
## FOR LPAREN incomplete_statement ENDLINE expression ENDLINE
## LR(1) items:
statement -> FOR LPAREN incomplete_statement ENDLINE expression ENDLINE . incomplete_statement RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On PRINTLN shift to state 44
-- On PRINT shift to state 46
-- On IDENT shift to state 9
-- On incomplete_statement shift to state 59
-- On ident shift to state 88
## Reductions:

State 59:
## Known stack suffix:
## FOR LPAREN incomplete_statement ENDLINE expression ENDLINE incomplete_statement
## LR(1) items:
statement -> FOR LPAREN incomplete_statement ENDLINE expression ENDLINE incomplete_statement . RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On RPAREN shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## FOR LPAREN incomplete_statement ENDLINE expression ENDLINE incomplete_statement RPAREN
## LR(1) items:
statement -> FOR LPAREN incomplete_statement ENDLINE expression ENDLINE incomplete_statement RPAREN . LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On LCURLY shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## FOR LPAREN incomplete_statement ENDLINE expression ENDLINE incomplete_statement RPAREN LCURLY
## LR(1) items:
statement -> FOR LPAREN incomplete_statement ENDLINE expression ENDLINE incomplete_statement RPAREN LCURLY . list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On WHILE shift to state 1
-- On PRINTLN shift to state 44
-- On PRINT shift to state 46
-- On IF shift to state 48
-- On IDENT shift to state 9
-- On FOR shift to state 53
-- On statement shift to state 62
-- On list(statement) shift to state 86
-- On incomplete_statement shift to state 64
-- On ident shift to state 66
## Reductions:
-- On RCURLY
--   reduce production list(statement) ->

State 62:
## Known stack suffix:
## statement
## LR(1) items:
list(statement) -> statement . list(statement) [ RCURLY EOF ]
## Transitions:
-- On WHILE shift to state 1
-- On PRINTLN shift to state 44
-- On PRINT shift to state 46
-- On IF shift to state 48
-- On IDENT shift to state 9
-- On FOR shift to state 53
-- On statement shift to state 62
-- On list(statement) shift to state 63
-- On incomplete_statement shift to state 64
-- On ident shift to state 66
## Reductions:
-- On RCURLY EOF
--   reduce production list(statement) ->

State 63:
## Known stack suffix:
## statement list(statement)
## LR(1) items:
list(statement) -> statement list(statement) . [ RCURLY EOF ]
## Transitions:
## Reductions:
-- On RCURLY EOF
--   reduce production list(statement) -> statement list(statement)

State 64:
## Known stack suffix:
## incomplete_statement
## LR(1) items:
statement -> incomplete_statement . ENDLINE [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On ENDLINE shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## incomplete_statement ENDLINE
## LR(1) items:
statement -> incomplete_statement ENDLINE . [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
## Reductions:
-- On WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF
--   reduce production statement -> incomplete_statement ENDLINE

State 66:
## Known stack suffix:
## ident
## LR(1) items:
incomplete_statement -> ident . ASSIGN_EQUALS expression [ ENDLINE ]
incomplete_statement -> ident . LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ ENDLINE ]
statement -> ident . LPAREN loption(separated_nonempty_list(COMMA,ident)) RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On LPAREN shift to state 67
-- On ASSIGN_EQUALS shift to state 84
## Reductions:

State 67:
## Known stack suffix:
## ident LPAREN
## LR(1) items:
incomplete_statement -> ident LPAREN . loption(separated_nonempty_list(COMMA,expression)) RPAREN [ ENDLINE ]
statement -> ident LPAREN . loption(separated_nonempty_list(COMMA,ident)) RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On separated_nonempty_list(COMMA,ident) shift to state 68
-- On separated_nonempty_list(COMMA,expression) shift to state 69
-- On loption(separated_nonempty_list(COMMA,ident)) shift to state 70
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 75
-- On ident shift to state 77
-- On expression shift to state 81
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expression)) ->
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,ident)) ->
** Conflict on RPAREN

State 68:
## Known stack suffix:
## separated_nonempty_list(COMMA,ident)
## LR(1) items:
loption(separated_nonempty_list(COMMA,ident)) -> separated_nonempty_list(COMMA,ident) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,ident)) -> separated_nonempty_list(COMMA,ident)

State 69:
## Known stack suffix:
## separated_nonempty_list(COMMA,expression)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression)

State 70:
## Known stack suffix:
## ident LPAREN loption(separated_nonempty_list(COMMA,ident))
## LR(1) items:
statement -> ident LPAREN loption(separated_nonempty_list(COMMA,ident)) . RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On RPAREN shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## ident LPAREN loption(separated_nonempty_list(COMMA,ident)) RPAREN
## LR(1) items:
statement -> ident LPAREN loption(separated_nonempty_list(COMMA,ident)) RPAREN . LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On LCURLY shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## ident LPAREN loption(separated_nonempty_list(COMMA,ident)) RPAREN LCURLY
## LR(1) items:
statement -> ident LPAREN loption(separated_nonempty_list(COMMA,ident)) RPAREN LCURLY . list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On WHILE shift to state 1
-- On PRINTLN shift to state 44
-- On PRINT shift to state 46
-- On IF shift to state 48
-- On IDENT shift to state 9
-- On FOR shift to state 53
-- On statement shift to state 62
-- On list(statement) shift to state 73
-- On incomplete_statement shift to state 64
-- On ident shift to state 66
## Reductions:
-- On RCURLY
--   reduce production list(statement) ->

State 73:
## Known stack suffix:
## ident LPAREN loption(separated_nonempty_list(COMMA,ident)) RPAREN LCURLY list(statement)
## LR(1) items:
statement -> ident LPAREN loption(separated_nonempty_list(COMMA,ident)) RPAREN LCURLY list(statement) . RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On RCURLY shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## ident LPAREN loption(separated_nonempty_list(COMMA,ident)) RPAREN LCURLY list(statement) RCURLY
## LR(1) items:
statement -> ident LPAREN loption(separated_nonempty_list(COMMA,ident)) RPAREN LCURLY list(statement) RCURLY . [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
## Reductions:
-- On WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF
--   reduce production statement -> ident LPAREN loption(separated_nonempty_list(COMMA,ident)) RPAREN LCURLY list(statement) RCURLY

State 75:
## Known stack suffix:
## ident LPAREN loption(separated_nonempty_list(COMMA,expression))
## LR(1) items:
incomplete_statement -> ident LPAREN loption(separated_nonempty_list(COMMA,expression)) . RPAREN [ RPAREN ENDLINE ]
## Transitions:
-- On RPAREN shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## ident LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
## LR(1) items:
incomplete_statement -> ident LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN . [ RPAREN ENDLINE ]
## Transitions:
## Reductions:
-- On RPAREN ENDLINE
--   reduce production incomplete_statement -> ident LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN

State 77:
## Known stack suffix:
## ident
## LR(1) items:
expression -> ident . [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV COMMA BOOL_EQUALS AND ]
separated_nonempty_list(COMMA,ident) -> ident . [ RPAREN ]
separated_nonempty_list(COMMA,ident) -> ident . COMMA separated_nonempty_list(COMMA,ident) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 78
## Reductions:
-- On TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV COMMA BOOL_EQUALS AND
--   reduce production expression -> ident
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,ident) -> ident
** Conflict on RPAREN COMMA

State 78:
## Known stack suffix:
## ident COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident COMMA . separated_nonempty_list(COMMA,ident) [ RPAREN ]
## Transitions:
-- On IDENT shift to state 9
-- On separated_nonempty_list(COMMA,ident) shift to state 79
-- On ident shift to state 80
## Reductions:

State 79:
## Known stack suffix:
## ident COMMA separated_nonempty_list(COMMA,ident)
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident)

State 80:
## Known stack suffix:
## ident
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident . [ RPAREN ]
separated_nonempty_list(COMMA,ident) -> ident . COMMA separated_nonempty_list(COMMA,ident) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 78
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,ident) -> ident

State 81:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV COMMA BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV COMMA BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV COMMA BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV COMMA BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV COMMA BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV COMMA BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV COMMA BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV COMMA BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV COMMA BOOL_EQUALS AND ]
separated_nonempty_list(COMMA,expression) -> expression . [ RPAREN ]
separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RPAREN ]
## Transitions:
-- On TIMES shift to state 13
-- On TERNARY_QUESTIONMARK shift to state 17
-- On PLUS shift to state 21
-- On OR shift to state 25
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
-- On COMMA shift to state 82
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,expression) -> expression

State 82:
## Known stack suffix:
## expression COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA . separated_nonempty_list(COMMA,expression) [ RPAREN ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On separated_nonempty_list(COMMA,expression) shift to state 83
-- On ident shift to state 11
-- On expression shift to state 81
## Reductions:

State 83:
## Known stack suffix:
## expression COMMA separated_nonempty_list(COMMA,expression)
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression)

State 84:
## Known stack suffix:
## ident ASSIGN_EQUALS
## LR(1) items:
incomplete_statement -> ident ASSIGN_EQUALS . expression [ RPAREN ENDLINE ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## ident ASSIGN_EQUALS expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER ENDLINE DIV BOOL_EQUALS AND ]
incomplete_statement -> ident ASSIGN_EQUALS expression . [ RPAREN ENDLINE ]
## Transitions:
-- On TIMES shift to state 13
-- On TERNARY_QUESTIONMARK shift to state 17
-- On PLUS shift to state 21
-- On OR shift to state 25
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:
-- On RPAREN ENDLINE
--   reduce production incomplete_statement -> ident ASSIGN_EQUALS expression

State 86:
## Known stack suffix:
## FOR LPAREN incomplete_statement ENDLINE expression ENDLINE incomplete_statement RPAREN LCURLY list(statement)
## LR(1) items:
statement -> FOR LPAREN incomplete_statement ENDLINE expression ENDLINE incomplete_statement RPAREN LCURLY list(statement) . RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On RCURLY shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## FOR LPAREN incomplete_statement ENDLINE expression ENDLINE incomplete_statement RPAREN LCURLY list(statement) RCURLY
## LR(1) items:
statement -> FOR LPAREN incomplete_statement ENDLINE expression ENDLINE incomplete_statement RPAREN LCURLY list(statement) RCURLY . [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
## Reductions:
-- On WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF
--   reduce production statement -> FOR LPAREN incomplete_statement ENDLINE expression ENDLINE incomplete_statement RPAREN LCURLY list(statement) RCURLY

State 88:
## Known stack suffix:
## ident
## LR(1) items:
incomplete_statement -> ident . ASSIGN_EQUALS expression [ RPAREN ENDLINE ]
incomplete_statement -> ident . LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ RPAREN ENDLINE ]
## Transitions:
-- On LPAREN shift to state 89
-- On ASSIGN_EQUALS shift to state 84
## Reductions:

State 89:
## Known stack suffix:
## ident LPAREN
## LR(1) items:
incomplete_statement -> ident LPAREN . loption(separated_nonempty_list(COMMA,expression)) RPAREN [ RPAREN ENDLINE ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On separated_nonempty_list(COMMA,expression) shift to state 69
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 75
-- On ident shift to state 11
-- On expression shift to state 81
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expression)) ->

State 90:
## Known stack suffix:
## IF LPAREN expression RPAREN LCURLY list(statement)
## LR(1) items:
statement -> IF LPAREN expression RPAREN LCURLY list(statement) . RCURLY list(elseif) [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On RCURLY shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## IF LPAREN expression RPAREN LCURLY list(statement) RCURLY
## LR(1) items:
statement -> IF LPAREN expression RPAREN LCURLY list(statement) RCURLY . list(elseif) [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On ELSE shift to state 92
-- On list(elseif) shift to state 107
-- On elseif shift to state 108
## Reductions:
-- On WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF
--   reduce production list(elseif) ->

State 92:
## Known stack suffix:
## ELSE
## LR(1) items:
elseif -> ELSE . IF LPAREN expression RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
elseif -> ELSE . LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
elseif -> ELSE . IF LPAREN expression RPAREN incomplete_statement ENDLINE [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
elseif -> ELSE . incomplete_statement ENDLINE [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
## Transitions:
-- On PRINTLN shift to state 44
-- On PRINT shift to state 46
-- On LCURLY shift to state 93
-- On IF shift to state 96
-- On IDENT shift to state 9
-- On incomplete_statement shift to state 105
-- On ident shift to state 88
## Reductions:

State 93:
## Known stack suffix:
## ELSE LCURLY
## LR(1) items:
elseif -> ELSE LCURLY . list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
## Transitions:
-- On WHILE shift to state 1
-- On PRINTLN shift to state 44
-- On PRINT shift to state 46
-- On IF shift to state 48
-- On IDENT shift to state 9
-- On FOR shift to state 53
-- On statement shift to state 62
-- On list(statement) shift to state 94
-- On incomplete_statement shift to state 64
-- On ident shift to state 66
## Reductions:
-- On RCURLY
--   reduce production list(statement) ->

State 94:
## Known stack suffix:
## ELSE LCURLY list(statement)
## LR(1) items:
elseif -> ELSE LCURLY list(statement) . RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
## Transitions:
-- On RCURLY shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## ELSE LCURLY list(statement) RCURLY
## LR(1) items:
elseif -> ELSE LCURLY list(statement) RCURLY . [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
## Transitions:
## Reductions:
-- On WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE
--   reduce production elseif -> ELSE LCURLY list(statement) RCURLY

State 96:
## Known stack suffix:
## ELSE IF
## LR(1) items:
elseif -> ELSE IF . LPAREN expression RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
elseif -> ELSE IF . LPAREN expression RPAREN incomplete_statement ENDLINE [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
## Transitions:
-- On LPAREN shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## ELSE IF LPAREN
## LR(1) items:
elseif -> ELSE IF LPAREN . expression RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
elseif -> ELSE IF LPAREN . expression RPAREN incomplete_statement ENDLINE [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
## Transitions:
-- On STRING_LIT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 7
-- On INT_LIT shift to state 8
-- On IDENT shift to state 9
-- On BOOL_LIT shift to state 10
-- On ident shift to state 11
-- On expression shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## ELSE IF LPAREN expression
## LR(1) items:
elseif -> ELSE IF LPAREN expression . RPAREN LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
elseif -> ELSE IF LPAREN expression . RPAREN incomplete_statement ENDLINE [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
expression -> expression . PLUS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . MINUS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . TIMES expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . DIV expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . LESS_EQ expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . GREATER_EQ expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . LESS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . GREATER expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . AND expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . OR expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . BOOL_EQUALS expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
expression -> expression . TERNARY_QUESTIONMARK expression TERNARY_COLON expression [ TIMES TERNARY_QUESTIONMARK RPAREN PLUS OR MINUS LESS_EQ LESS GREATER_EQ GREATER DIV BOOL_EQUALS AND ]
## Transitions:
-- On TIMES shift to state 13
-- On TERNARY_QUESTIONMARK shift to state 17
-- On RPAREN shift to state 99
-- On PLUS shift to state 21
-- On OR shift to state 25
-- On MINUS shift to state 27
-- On LESS_EQ shift to state 15
-- On LESS shift to state 23
-- On GREATER_EQ shift to state 29
-- On GREATER shift to state 31
-- On DIV shift to state 33
-- On BOOL_EQUALS shift to state 35
-- On AND shift to state 37
## Reductions:

State 99:
## Known stack suffix:
## ELSE IF LPAREN expression RPAREN
## LR(1) items:
elseif -> ELSE IF LPAREN expression RPAREN . LCURLY list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
elseif -> ELSE IF LPAREN expression RPAREN . incomplete_statement ENDLINE [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
## Transitions:
-- On PRINTLN shift to state 44
-- On PRINT shift to state 46
-- On LCURLY shift to state 100
-- On IDENT shift to state 9
-- On incomplete_statement shift to state 103
-- On ident shift to state 88
## Reductions:

State 100:
## Known stack suffix:
## ELSE IF LPAREN expression RPAREN LCURLY
## LR(1) items:
elseif -> ELSE IF LPAREN expression RPAREN LCURLY . list(statement) RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
## Transitions:
-- On WHILE shift to state 1
-- On PRINTLN shift to state 44
-- On PRINT shift to state 46
-- On IF shift to state 48
-- On IDENT shift to state 9
-- On FOR shift to state 53
-- On statement shift to state 62
-- On list(statement) shift to state 101
-- On incomplete_statement shift to state 64
-- On ident shift to state 66
## Reductions:
-- On RCURLY
--   reduce production list(statement) ->

State 101:
## Known stack suffix:
## ELSE IF LPAREN expression RPAREN LCURLY list(statement)
## LR(1) items:
elseif -> ELSE IF LPAREN expression RPAREN LCURLY list(statement) . RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
## Transitions:
-- On RCURLY shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## ELSE IF LPAREN expression RPAREN LCURLY list(statement) RCURLY
## LR(1) items:
elseif -> ELSE IF LPAREN expression RPAREN LCURLY list(statement) RCURLY . [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
## Transitions:
## Reductions:
-- On WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE
--   reduce production elseif -> ELSE IF LPAREN expression RPAREN LCURLY list(statement) RCURLY

State 103:
## Known stack suffix:
## ELSE IF LPAREN expression RPAREN incomplete_statement
## LR(1) items:
elseif -> ELSE IF LPAREN expression RPAREN incomplete_statement . ENDLINE [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
## Transitions:
-- On ENDLINE shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## ELSE IF LPAREN expression RPAREN incomplete_statement ENDLINE
## LR(1) items:
elseif -> ELSE IF LPAREN expression RPAREN incomplete_statement ENDLINE . [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
## Transitions:
## Reductions:
-- On WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE
--   reduce production elseif -> ELSE IF LPAREN expression RPAREN incomplete_statement ENDLINE

State 105:
## Known stack suffix:
## ELSE incomplete_statement
## LR(1) items:
elseif -> ELSE incomplete_statement . ENDLINE [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
## Transitions:
-- On ENDLINE shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## ELSE incomplete_statement ENDLINE
## LR(1) items:
elseif -> ELSE incomplete_statement ENDLINE . [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE ]
## Transitions:
## Reductions:
-- On WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ELSE
--   reduce production elseif -> ELSE incomplete_statement ENDLINE

State 107:
## Known stack suffix:
## IF LPAREN expression RPAREN LCURLY list(statement) RCURLY list(elseif)
## LR(1) items:
statement -> IF LPAREN expression RPAREN LCURLY list(statement) RCURLY list(elseif) . [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
## Reductions:
-- On WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF
--   reduce production statement -> IF LPAREN expression RPAREN LCURLY list(statement) RCURLY list(elseif)

State 108:
## Known stack suffix:
## elseif
## LR(1) items:
list(elseif) -> elseif . list(elseif) [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On ELSE shift to state 92
-- On list(elseif) shift to state 109
-- On elseif shift to state 108
## Reductions:
-- On WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF
--   reduce production list(elseif) ->

State 109:
## Known stack suffix:
## elseif list(elseif)
## LR(1) items:
list(elseif) -> elseif list(elseif) . [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
## Reductions:
-- On WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF
--   reduce production list(elseif) -> elseif list(elseif)

State 110:
## Known stack suffix:
## IF LPAREN expression RPAREN incomplete_statement
## LR(1) items:
statement -> IF LPAREN expression RPAREN incomplete_statement . ENDLINE list(elseif) [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On ENDLINE shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## IF LPAREN expression RPAREN incomplete_statement ENDLINE
## LR(1) items:
statement -> IF LPAREN expression RPAREN incomplete_statement ENDLINE . list(elseif) [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On ELSE shift to state 92
-- On list(elseif) shift to state 112
-- On elseif shift to state 108
## Reductions:
-- On WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF
--   reduce production list(elseif) ->

State 112:
## Known stack suffix:
## IF LPAREN expression RPAREN incomplete_statement ENDLINE list(elseif)
## LR(1) items:
statement -> IF LPAREN expression RPAREN incomplete_statement ENDLINE list(elseif) . [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
## Reductions:
-- On WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF
--   reduce production statement -> IF LPAREN expression RPAREN incomplete_statement ENDLINE list(elseif)

State 113:
## Known stack suffix:
## WHILE LPAREN expression RPAREN LCURLY list(statement)
## LR(1) items:
statement -> WHILE LPAREN expression RPAREN LCURLY list(statement) . RCURLY [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
-- On RCURLY shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## WHILE LPAREN expression RPAREN LCURLY list(statement) RCURLY
## LR(1) items:
statement -> WHILE LPAREN expression RPAREN LCURLY list(statement) RCURLY . [ WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF ]
## Transitions:
## Reductions:
-- On WHILE RCURLY PRINTLN PRINT IF IDENT FOR EOF
--   reduce production statement -> WHILE LPAREN expression RPAREN LCURLY list(statement) RCURLY

State 115:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

State 116:
## Known stack suffix:
## list(statement)
## LR(1) items:
program -> list(statement) . EOF [ # ]
## Transitions:
-- On EOF shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## list(statement) EOF
## LR(1) items:
program -> list(statement) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> list(statement) EOF

